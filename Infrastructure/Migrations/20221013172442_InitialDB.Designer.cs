// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MeFitDbContext))]
    [Migration("20221013172442_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ExerciseWorkout", b =>
                {
                    b.Property<int>("ExercisesExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsWorkoutId")
                        .HasColumnType("int");

                    b.HasKey("ExercisesExerciseId", "WorkoutsWorkoutId");

                    b.HasIndex("WorkoutsWorkoutId");

                    b.ToTable("ExerciseWorkout");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExerciseId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MuscleGroups")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercise");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Exercise");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsAchieved")
                        .HasColumnType("bit");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("date");

                    b.HasKey("GoalId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("ProgramId")
                        .IsUnique();

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"), 1L, 1);

                    b.Property<string>("Disabilities")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("MedicalConditions")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramId"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgramId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("KeycloakId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkoutId"), 1L, 1);

                    b.Property<int>("ExerciseRepetitions")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasMaxLength(50)
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkoutId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("ProgramWorkout", b =>
                {
                    b.Property<int>("ProgramsProgramId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutsWorkoutId")
                        .HasColumnType("int");

                    b.HasKey("ProgramsProgramId", "WorkoutsWorkoutId");

                    b.HasIndex("WorkoutsWorkoutId");

                    b.ToTable("ProgramWorkout");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Exercises.CardioExercise", b =>
                {
                    b.HasBaseType("Infrastructure.Models.Domain.Exercise");

                    b.Property<double>("DistanceInKm")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("CardioExercise");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Exercises.RepExercise", b =>
                {
                    b.HasBaseType("Infrastructure.Models.Domain.Exercise");

                    b.Property<int>("Repetitions")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("RepExercise");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Exercises.TimedExercise", b =>
                {
                    b.HasBaseType("Infrastructure.Models.Domain.Exercise");

                    b.Property<double>("Seconds")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("TimedExercise");
                });

            modelBuilder.Entity("ExerciseWorkout", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExercisesExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Goal", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Profile", "Profile")
                        .WithMany("Goals")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.Program", "Program")
                        .WithOne("Goal")
                        .HasForeignKey("Infrastructure.Models.Domain.Goal", "ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Profile", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Infrastructure.Models.Domain.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Workout", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.User", "Contributor")
                        .WithOne("Contributed")
                        .HasForeignKey("Infrastructure.Models.Domain.Workout", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contributor");
                });

            modelBuilder.Entity("ProgramWorkout", b =>
                {
                    b.HasOne("Infrastructure.Models.Domain.Program", null)
                        .WithMany()
                        .HasForeignKey("ProgramsProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.Models.Domain.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Profile", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.Program", b =>
                {
                    b.Navigation("Goal")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.Models.Domain.User", b =>
                {
                    b.Navigation("Contributed")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
